/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.3
 * source: service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class Machine extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        location?: GPS;
        fuel_level?: number;
        is_paused?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
            if ("fuel_level" in data && data.fuel_level != undefined) {
                this.fuel_level = data.fuel_level;
            }
            if ("is_paused" in data && data.is_paused != undefined) {
                this.is_paused = data.is_paused;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get location() {
        return pb_1.Message.getWrapperField(this, GPS, 2) as GPS;
    }
    set location(value: GPS) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_location() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get fuel_level() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set fuel_level(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get is_paused() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_paused(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: number;
        location?: ReturnType<typeof GPS.prototype.toObject>;
        fuel_level?: number;
        is_paused?: boolean;
    }): Machine {
        const message = new Machine({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.location != null) {
            message.location = GPS.fromObject(data.location);
        }
        if (data.fuel_level != null) {
            message.fuel_level = data.fuel_level;
        }
        if (data.is_paused != null) {
            message.is_paused = data.is_paused;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            location?: ReturnType<typeof GPS.prototype.toObject>;
            fuel_level?: number;
            is_paused?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.location != null) {
            data.location = this.location.toObject();
        }
        if (this.fuel_level != null) {
            data.fuel_level = this.fuel_level;
        }
        if (this.is_paused != null) {
            data.is_paused = this.is_paused;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeUint32(1, this.id);
        if (this.has_location)
            writer.writeMessage(2, this.location, () => this.location.serialize(writer));
        if (this.fuel_level != 0)
            writer.writeFloat(3, this.fuel_level);
        if (this.is_paused != false)
            writer.writeBool(4, this.is_paused);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Machine {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Machine();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.location, () => message.location = GPS.deserialize(reader));
                    break;
                case 3:
                    message.fuel_level = reader.readFloat();
                    break;
                case 4:
                    message.is_paused = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Machine {
        return Machine.deserialize(bytes);
    }
}
export class GPS extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        lat?: number;
        lon?: number;
        alt?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("lat" in data && data.lat != undefined) {
                this.lat = data.lat;
            }
            if ("lon" in data && data.lon != undefined) {
                this.lon = data.lon;
            }
            if ("alt" in data && data.alt != undefined) {
                this.alt = data.alt;
            }
        }
    }
    get lat() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set lat(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get lon() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set lon(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get alt() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set alt(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        lat?: number;
        lon?: number;
        alt?: number;
    }): GPS {
        const message = new GPS({});
        if (data.lat != null) {
            message.lat = data.lat;
        }
        if (data.lon != null) {
            message.lon = data.lon;
        }
        if (data.alt != null) {
            message.alt = data.alt;
        }
        return message;
    }
    toObject() {
        const data: {
            lat?: number;
            lon?: number;
            alt?: number;
        } = {};
        if (this.lat != null) {
            data.lat = this.lat;
        }
        if (this.lon != null) {
            data.lon = this.lon;
        }
        if (this.alt != null) {
            data.alt = this.alt;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.lat != 0)
            writer.writeDouble(1, this.lat);
        if (this.lon != 0)
            writer.writeDouble(2, this.lon);
        if (this.alt != 0)
            writer.writeFloat(3, this.alt);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GPS {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GPS();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.lat = reader.readDouble();
                    break;
                case 2:
                    message.lon = reader.readDouble();
                    break;
                case 3:
                    message.alt = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GPS {
        return GPS.deserialize(bytes);
    }
}
export class MachineStreamRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): MachineStreamRequest {
        const message = new MachineStreamRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MachineStreamRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MachineStreamRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MachineStreamRequest {
        return MachineStreamRequest.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedMachineMapService {
    static definition = {
        Pause: {
            path: "/MachineMap/Pause",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: Machine) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => Machine.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Machine) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Machine.deserialize(new Uint8Array(bytes))
        },
        UnPause: {
            path: "/MachineMap/UnPause",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: Machine) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => Machine.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Machine) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Machine.deserialize(new Uint8Array(bytes))
        },
        MachineStream: {
            path: "/MachineMap/MachineStream",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: MachineStreamRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MachineStreamRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Machine) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Machine.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Pause(call: grpc_1.ServerUnaryCall<Machine, Machine>, callback: grpc_1.sendUnaryData<Machine>): void;
    abstract UnPause(call: grpc_1.ServerUnaryCall<Machine, Machine>, callback: grpc_1.sendUnaryData<Machine>): void;
    abstract MachineStream(call: grpc_1.ServerWritableStream<MachineStreamRequest, Machine>): void;
}
export class MachineMapClient extends grpc_1.makeGenericClientConstructor(UnimplementedMachineMapService.definition, "MachineMap", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Pause: GrpcUnaryServiceInterface<Machine, Machine> = (message: Machine, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Machine>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Machine>, callback?: grpc_1.requestCallback<Machine>): grpc_1.ClientUnaryCall => {
        return super.Pause(message, metadata, options, callback);
    };
    UnPause: GrpcUnaryServiceInterface<Machine, Machine> = (message: Machine, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Machine>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Machine>, callback?: grpc_1.requestCallback<Machine>): grpc_1.ClientUnaryCall => {
        return super.UnPause(message, metadata, options, callback);
    };
    MachineStream: GrpcStreamServiceInterface<MachineStreamRequest, MachineStreamRequest> = (message: MachineStreamRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<MachineStreamRequest> => {
        return super.MachineStream(message, metadata, options);
    };
}
